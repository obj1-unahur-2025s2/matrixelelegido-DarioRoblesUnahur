import matrix.*


describe "neo" {

  test "vitalidad de neo despues de saltar" {
    neo.saltar()
    assert.equals(5,neo.vitalidad())
  }

  test "neo es el elegido" {
    assert.that(neo.esElElegido())
  }

  test "eneria de neo despues de saltar" {
    neo.saltar()
    assert.equals(50, neo.energia())
  }
}

describe "morfeo" {
  test "morfeo es el elegido" {
    assert.notThat(morfeo.esElElegido())
  }
  test "vitalidad de morfeo despues de saltar" {
    morfeo.saltar()
    assert.equals(7,morfeo.vitalidad())
  }
  test "morfeo se cansa al saltar" {
    morfeo.saltar()
    assert.that(morfeo.estaCansado())
  }
  test "morfeo inicia descansado" {
    assert.notThat(morfeo.estaCansado())
  }
}

describe "trinity" {
  test "vitslidad de trinity" {
    assert.equals(0, trinity.vitalidad())
  }
  test "saltar no afecta a trinity" {
    trinity.saltar()
    trinity.saltar()
    trinity.saltar()
    assert.equals(0, trinity.vitalidad())
  }
  test "trinity no es el elegido" {
    assert.notThat(trinity.esElElegido())
  }
}

describe "nave" {
  test "cantidad de pasajeros" {
    assert.equals(3, nave.cantidadDePasajeros())
  }
  test "pasajero con mayor vitalidad es neo" {
    assert.equals(neo, nave.pasajeroConMayorVitalidad())
  }
  test "la nave no est√° equilibrada" {
    assert.notThat(nave.estaEquilibrada())
  }
}